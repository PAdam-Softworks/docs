{
  "api/Enemy.BaseEnemy.html": {
    "href": "api/Enemy.BaseEnemy.html",
    "title": "Class BaseEnemy | PAdam Softworks",
    "keywords": "Class BaseEnemy Inheritance Object BaseEnemy Implements IEnemy Namespace : Enemy Assembly : cs.temp.dll.dll Syntax public abstract class BaseEnemy : MonoBehaviour, IEnemy Fields scoreOnKill Ilość punktów jaką zdobędzie gracz po zabiciu przeciwnika Declaration public int scoreOnKill Field Value Type Description Int32 Implements IEnemy"
  },
  "api/Enemy.Healthbar.html": {
    "href": "api/Enemy.Healthbar.html",
    "title": "Class Healthbar | PAdam Softworks",
    "keywords": "Class Healthbar Pasek życia nad przeciwnikiem Inheritance Object Healthbar Namespace : Enemy Assembly : cs.temp.dll.dll Syntax public class Healthbar : MonoBehaviour Methods SetHealth(Int32) Ustawia obecną ilość życia na pasku życia Declaration public void SetHealth(int currentHealth) Parameters Type Name Description Int32 currentHealth Ilość życia SetMaxHealth(Int32) Ustawia maksymalną ilość życia na pasku życia Declaration public void SetMaxHealth(int maxHealth) Parameters Type Name Description Int32 maxHealth Maksymalna ilość życia"
  },
  "api/Enemy.html": {
    "href": "api/Enemy.html",
    "title": "Namespace Enemy | PAdam Softworks",
    "keywords": "Namespace Enemy Classes BaseEnemy Healthbar Pasek życia nad przeciwnikiem Interfaces IEnemy Interfejs określający przeciwnika"
  },
  "api/Enemy.IEnemy.html": {
    "href": "api/Enemy.IEnemy.html",
    "title": "Interface IEnemy | PAdam Softworks",
    "keywords": "Interface IEnemy Interfejs określający przeciwnika Namespace : Enemy Assembly : cs.temp.dll.dll Syntax public interface IEnemy"
  },
  "api/Global.AttackController.html": {
    "href": "api/Global.AttackController.html",
    "title": "Class AttackController | PAdam Softworks",
    "keywords": "Class AttackController Inheritance Object AttackController Namespace : Global Assembly : cs.temp.dll.dll Syntax public class AttackController : MonoBehaviour"
  },
  "api/Global.DeathZone.html": {
    "href": "api/Global.DeathZone.html",
    "title": "Class DeathZone | PAdam Softworks",
    "keywords": "Class DeathZone Inheritance Object DeathZone Namespace : Global Assembly : cs.temp.dll.dll Syntax public class DeathZone : MonoBehaviour"
  },
  "api/Global.DestroyAfterTime.html": {
    "href": "api/Global.DestroyAfterTime.html",
    "title": "Class DestroyAfterTime | PAdam Softworks",
    "keywords": "Class DestroyAfterTime Inheritance Object DestroyAfterTime Namespace : Global Assembly : cs.temp.dll.dll Syntax public class DestroyAfterTime : MonoBehaviour"
  },
  "api/Global.EnemySpawner.html": {
    "href": "api/Global.EnemySpawner.html",
    "title": "Class EnemySpawner | PAdam Softworks",
    "keywords": "Class EnemySpawner Inheritance Object EnemySpawner Namespace : Global Assembly : cs.temp.dll.dll Syntax public class EnemySpawner : MonoBehaviour Fields SpawnCount Declaration public int SpawnCount Field Value Type Description Int32 SpawnDelay Declaration public float SpawnDelay Field Value Type Description Single spawnDirection Declaration public Vector2 spawnDirection Field Value Type Description Vector2 SpawnPrefab Declaration public GameObject SpawnPrefab Field Value Type Description GameObject"
  },
  "api/Global.HoboController.html": {
    "href": "api/Global.HoboController.html",
    "title": "Class HoboController | PAdam Softworks",
    "keywords": "Class HoboController Inheritance Object HoboController Namespace : Global Assembly : cs.temp.dll.dll Syntax public class HoboController : BaseEnemy Fields AnimationTimeScale Declaration public float AnimationTimeScale Field Value Type Description Single bloodSplashEffect Declaration public GameObject bloodSplashEffect Field Value Type Description GameObject isMove Declaration public bool isMove Field Value Type Description Boolean moveDirection Declaration public Vector2 moveDirection Field Value Type Description Vector2 Speed Declaration public float Speed Field Value Type Description Single WalkFrames Declaration public List<Texture2D> WalkFrames Field Value Type Description List < Texture2D > Methods OnDamaged(Int32) Declaration public void OnDamaged(int damage) Parameters Type Name Description Int32 damage OnDeath() Declaration public void OnDeath()"
  },
  "api/Global.html": {
    "href": "api/Global.html",
    "title": "Namespace Global | PAdam Softworks",
    "keywords": "Namespace Global Classes AttackController DeathZone DestroyAfterTime EnemySpawner HoboController Inventory Bazowa klasa ekwipunku. Obs�uguje dodawanie i odejmowanie rzeczy w \"ekwipunku\" gracza. Klasa r�wnie� wystawia metody niezb�dne do obserwowania, czy co� si� zmieni�o w kolekcji przedmiot�w. InventoryController Kontroler dla ekwipunku gracza. Item Model przedmiot�w w grze ItemController Kontroler zachowa� przedmiot�w na mapie. MovingPlatformController Obstacle PauseMenu PlayerController PlayerTestingUI ProjectileController ScoreManager ScrollingCameraController SpiderController Strings TestInventory Testuje klase Inventory TimerController TurretController Interfaces IInventory Inerfejs dostarczaj�cy podstawowe operacje na ekwipunku Enums Item.ItemType"
  },
  "api/Global.IInventory.html": {
    "href": "api/Global.IInventory.html",
    "title": "Interface IInventory | PAdam Softworks",
    "keywords": "Interface IInventory Inerfejs dostarczaj�cy podstawowe operacje na ekwipunku Namespace : Global Assembly : cs.temp.dll.dll Syntax public interface IInventory Methods AddItem(Item) Dodaje przedmiot do ekwipunku Declaration void AddItem(Item item) Parameters Type Name Description Item item Przedmiot do dodania RemoveItem(Item) Usuwa przedmiot z ewkipunku Declaration void RemoveItem(Item item) Parameters Type Name Description Item item Przedmiot do usuni�cia"
  },
  "api/Global.Inventory.html": {
    "href": "api/Global.Inventory.html",
    "title": "Class Inventory | PAdam Softworks",
    "keywords": "Class Inventory Bazowa klasa ekwipunku. Obs�uguje dodawanie i odejmowanie rzeczy w \"ekwipunku\" gracza. Klasa r�wnie� wystawia metody niezb�dne do obserwowania, czy co� si� zmieni�o w kolekcji przedmiot�w. Inheritance Object Inventory Implements IInventory Namespace : Global Assembly : cs.temp.dll.dll Syntax public class Inventory : IInventory Properties ItemList Lista przedmiot�w w ekwpiunku. Declaration public ReadOnlyCollection<Item> ItemList { get; } Property Value Type Description ReadOnlyCollection < Item > Methods AddItem(Item) Dodaje przedmiot do ekwipunku Declaration public void AddItem(Item item) Parameters Type Name Description Item item Przedmiot do dodania RemoveItem(Item) Usuwa przedmiot z ewkipunku Declaration public void RemoveItem(Item item) Parameters Type Name Description Item item Przedmiot do usuni�cia Events CollectionChanged Zdarzenie informuj�ce o zmianie kolekcji przedmiot�w. Declaration public event EventHandler CollectionChanged Event Type Type Description EventHandler Remarks Zostaje wywo�ane po u�yciu metody Inventory.AddItem(Item) oraz Inventory.RemoveItem(Item) Implements IInventory"
  },
  "api/Global.InventoryController.html": {
    "href": "api/Global.InventoryController.html",
    "title": "Class InventoryController | PAdam Softworks",
    "keywords": "Class InventoryController Kontroler dla ekwipunku gracza. Inheritance Object InventoryController Implements IInventory Namespace : Global Assembly : cs.temp.dll.dll Syntax public class InventoryController : MonoBehaviour, IInventory Methods AddItem(Item) Dodaje przedmiot do ekwipunku Declaration public void AddItem(Item item) Parameters Type Name Description Item item Przedmiot do dodania RemoveItem(Item) Usuwa przedmiot z ewkipunku Declaration public void RemoveItem(Item item) Parameters Type Name Description Item item Przedmiot do usuni�cia Implements IInventory"
  },
  "api/Global.Item.html": {
    "href": "api/Global.Item.html",
    "title": "Class Item | PAdam Softworks",
    "keywords": "Class Item Model przedmiot�w w grze Inheritance Object Item Namespace : Global Assembly : cs.temp.dll.dll Syntax public class Item Fields ID ID przedmiotu Declaration public int ID Field Value Type Description Int32 IsStackable Okre�la, czy przedmiot mo�e ��czy� si� z innymi przedmiotami tego samego typu Declaration public bool IsStackable Field Value Type Description Boolean Name Nazwa przedmiotu Declaration public string Name Field Value Type Description String Quantity Ilo�� przedmiotu Declaration public int Quantity Field Value Type Description Int32 Texture Tekstura reprezentuj�ca przedmot Declaration public string Texture Field Value Type Description String Type Typ przedmiotu Declaration public Item.ItemType Type Field Value Type Description Item.ItemType"
  },
  "api/Global.Item.ItemType.html": {
    "href": "api/Global.Item.ItemType.html",
    "title": "Enum Item.ItemType | PAdam Softworks",
    "keywords": "Enum Item.ItemType Namespace : Global Assembly : cs.temp.dll.dll Syntax public enum ItemType Fields Name Description Ammunition Health Money PowerUp"
  },
  "api/Global.ItemController.html": {
    "href": "api/Global.ItemController.html",
    "title": "Class ItemController | PAdam Softworks",
    "keywords": "Class ItemController Kontroler zachowa� przedmiot�w na mapie. Inheritance Object ItemController Namespace : Global Assembly : cs.temp.dll.dll Syntax public class ItemController : MonoBehaviour Fields ItemData Declaration public TextAsset ItemData Field Value Type Description TextAsset"
  },
  "api/Global.MovingPlatformController.html": {
    "href": "api/Global.MovingPlatformController.html",
    "title": "Class MovingPlatformController | PAdam Softworks",
    "keywords": "Class MovingPlatformController Inheritance Object MovingPlatformController Namespace : Global Assembly : cs.temp.dll.dll Syntax public class MovingPlatformController : MonoBehaviour Fields Direction Declaration public Vector2 Direction Field Value Type Description Vector2 PositionDelta Declaration public Vector3 PositionDelta Field Value Type Description Vector3 Speed Declaration public float Speed Field Value Type Description Single"
  },
  "api/Global.Obstacle.html": {
    "href": "api/Global.Obstacle.html",
    "title": "Class Obstacle | PAdam Softworks",
    "keywords": "Class Obstacle Inheritance Object Obstacle Namespace : Global Assembly : cs.temp.dll.dll Syntax public class Obstacle : MonoBehaviour Fields EnemyDamage Obrażenia które otrzyma przeciwnik Declaration public int EnemyDamage Field Value Type Description Int32 PlayerDamage Obrażenia które otrzyma postać gracza Declaration public int PlayerDamage Field Value Type Description Int32"
  },
  "api/Global.PauseMenu.html": {
    "href": "api/Global.PauseMenu.html",
    "title": "Class PauseMenu | PAdam Softworks",
    "keywords": "Class PauseMenu Inheritance Object PauseMenu Namespace : Global Assembly : cs.temp.dll.dll Syntax public class PauseMenu : MonoBehaviour Fields IsPaused Declaration public static bool IsPaused Field Value Type Description Boolean pauseMenuUI Declaration public GameObject pauseMenuUI Field Value Type Description GameObject Methods QuitGame() Declaration public void QuitGame() Resume() Declaration public void Resume()"
  },
  "api/Global.PlayerController.html": {
    "href": "api/Global.PlayerController.html",
    "title": "Class PlayerController | PAdam Softworks",
    "keywords": "Class PlayerController Inheritance Object PlayerController Namespace : Global Assembly : cs.temp.dll.dll Syntax public class PlayerController : MonoBehaviour Fields Attack2Frames Grafiki ataku 2 Declaration public List<Texture2D> Attack2Frames Field Value Type Description List < Texture2D > AttackFrames Grafiki ataku 1 Declaration public List<Texture2D> AttackFrames Field Value Type Description List < Texture2D > AttackFX Declaration public GameObject AttackFX Field Value Type Description GameObject coyoteTimeDefault Czas przez jaki można podskoczyć po opuszczeniu platformy Declaration public float coyoteTimeDefault Field Value Type Description Single FallFrames Grafiki spadania Declaration public List<Texture2D> FallFrames Field Value Type Description List < Texture2D > floorCollider Declaration public Collider2D floorCollider Field Value Type Description Collider2D GroundMask Maska zawierająca warstwy uznawane za podłoże Declaration public LayerMask GroundMask Field Value Type Description LayerMask HurtFrames Grafiki otrzymywania obrażeń Declaration public List<Texture2D> HurtFrames Field Value Type Description List < Texture2D > IdleFrames Grafiki stania w miejscu Declaration public List<Texture2D> IdleFrames Field Value Type Description List < Texture2D > JumpFrames Grafiki skakania Declaration public List<Texture2D> JumpFrames Field Value Type Description List < Texture2D > KnockbackSpeed Moc odrzutu bohatera po zostaniu trafionym Declaration public float KnockbackSpeed Field Value Type Description Single ProjectilePrefab Obiekt pocisku wystrzeliwanego przez gracza Declaration public GameObject ProjectilePrefab Field Value Type Description GameObject SlowDownRate Współczynnik spowalniania bohatera gdy nie są naciśnięte przyciski poruszania Declaration public float SlowDownRate Field Value Type Description Single SpeedAirbone Prędkość poruszania się w powietrzu Declaration public float SpeedAirbone Field Value Type Description Single SpeedDoubleJump Moc drugiego skoku bohatera Declaration public float SpeedDoubleJump Field Value Type Description Single SpeedGrounded Declaration public float SpeedGrounded Field Value Type Description Single SpeedJump Moc skoku bohatera Declaration public float SpeedJump Field Value Type Description Single WalkFrames Grafiki chodzenia Declaration public List<Texture2D> WalkFrames Field Value Type Description List < Texture2D > Properties canDoubleJump Czy gracz może skoczyć dwukrotnie Declaration public bool canDoubleJump { get; } Property Value Type Description Boolean canJump Czy gracz może skoczyć Declaration public bool canJump { get; } Property Value Type Description Boolean isGrounded Czy gracz jest na ziemi Declaration public bool isGrounded { get; } Property Value Type Description Boolean isOnMoving Czy gracz jest na ruchomej platformie Declaration public bool isOnMoving { get; } Property Value Type Description Boolean rb Ciało fizyczne gracza Declaration public Rigidbody2D rb { get; } Property Value Type Description Rigidbody2D wasHit Czy gracz jest oszołomiony Declaration public bool wasHit { get; } Property Value Type Description Boolean Methods OnDeath() Declaration public void OnDeath() ReceiveDamageKnockback(Vector3, Int32, Single) Gracz zostaje ogłuszony i popchnięty w kierunku odwrotnym do źródła obrażeń Declaration public void ReceiveDamageKnockback(Vector3 source, int damage = 1, float recoveryTime = 0.5F) Parameters Type Name Description Vector3 source Int32 damage Single recoveryTime czas ogłuszenia gracza"
  },
  "api/Global.PlayerTestingUI.html": {
    "href": "api/Global.PlayerTestingUI.html",
    "title": "Class PlayerTestingUI | PAdam Softworks",
    "keywords": "Class PlayerTestingUI Inheritance Object PlayerTestingUI Namespace : Global Assembly : cs.temp.dll.dll Syntax public class PlayerTestingUI : MonoBehaviour Fields TestingUI Declaration public GameObject TestingUI Field Value Type Description GameObject UITextPrefab Declaration public GameObject UITextPrefab Field Value Type Description GameObject"
  },
  "api/Global.ProjectileController.html": {
    "href": "api/Global.ProjectileController.html",
    "title": "Class ProjectileController | PAdam Softworks",
    "keywords": "Class ProjectileController Inheritance Object ProjectileController Namespace : Global Assembly : cs.temp.dll.dll Syntax public class ProjectileController : MonoBehaviour Fields AnimSpeed Długość trwania animacji Declaration public int AnimSpeed Field Value Type Description Int32 FlipDirection Jeżeli true, odwraca domyślny kierunek tekstury Declaration public bool FlipDirection Field Value Type Description Boolean Frames Klatki animacji Declaration public List<Texture2D> Frames Field Value Type Description List < Texture2D > Methods Shoot(Vector3, Single, Vector2, Single, Int32) Nadaje pociskowi prędkość w określonym kierunku i czas trwania Declaration public void Shoot(Vector3 position, float speed, Vector2 direction, float lifeTime, int layer = 10) Parameters Type Name Description Vector3 position miejsce w którym pocisk się pojawia (world space) Single speed prędkość pocisku (stała) Vector2 direction kierunek Single lifeTime czas żywota Int32 layer warstwa fizyczna (domyślnie PhysicalProjectile)"
  },
  "api/Global.ScoreManager.html": {
    "href": "api/Global.ScoreManager.html",
    "title": "Class ScoreManager | PAdam Softworks",
    "keywords": "Class ScoreManager Inheritance Object ScoreManager Namespace : Global Assembly : cs.temp.dll.dll Syntax public class ScoreManager : MonoBehaviour Fields scoreText Tekst który będzie aktualizowany po zmianie punktów Declaration public Text scoreText Field Value Type Description Text Properties ScoreCount Ilość zdobytych punktów Declaration public int ScoreCount { get; } Property Value Type Description Int32 Methods AddScore(Int32) Dodaj punkty Declaration public void AddScore(int scoreToAdd) Parameters Type Name Description Int32 scoreToAdd Ilość punktów do dodania RemoveScore(Int32) Usuwa podaną liczbę punktów z wyniku. Wynik będzie zawsze dodatni Declaration public void RemoveScore(int scoreToRemove) Parameters Type Name Description Int32 scoreToRemove Ilość punktów do usunięcia ResetScore() Resetuje licznik wyników do 0 Declaration public void ResetScore()"
  },
  "api/Global.ScrollingCameraController.html": {
    "href": "api/Global.ScrollingCameraController.html",
    "title": "Class ScrollingCameraController | PAdam Softworks",
    "keywords": "Class ScrollingCameraController Inheritance Object ScrollingCameraController Namespace : Global Assembly : cs.temp.dll.dll Syntax public class ScrollingCameraController : MonoBehaviour Fields HeightOffset Declaration public float HeightOffset Field Value Type Description Single SmoothTime Declaration public float SmoothTime Field Value Type Description Single target Declaration public Transform target Field Value Type Description Transform"
  },
  "api/Global.SpiderController.html": {
    "href": "api/Global.SpiderController.html",
    "title": "Class SpiderController | PAdam Softworks",
    "keywords": "Class SpiderController Inheritance Object SpiderController Namespace : Global Assembly : cs.temp.dll.dll Syntax public class SpiderController : MonoBehaviour Fields AnimationTimeScale Declaration public float AnimationTimeScale Field Value Type Description Single isMove Declaration public bool isMove Field Value Type Description Boolean Speed Declaration public float Speed Field Value Type Description Single WalkFrames Declaration public List<Texture2D> WalkFrames Field Value Type Description List < Texture2D >"
  },
  "api/Global.Strings.html": {
    "href": "api/Global.Strings.html",
    "title": "Class Strings | PAdam Softworks",
    "keywords": "Class Strings Inheritance Object Strings Namespace : Global Assembly : cs.temp.dll.dll Syntax public class Strings Fields EnemyProjectile Declaration public static string EnemyProjectile Field Value Type Description String EnemyTag Declaration public static string EnemyTag Field Value Type Description String HorizontalAxis Declaration public static string HorizontalAxis Field Value Type Description String PlayerProjectile Declaration public static string PlayerProjectile Field Value Type Description String PlayerTag Declaration public static string PlayerTag Field Value Type Description String VerticalAxis Declaration public static string VerticalAxis Field Value Type Description String"
  },
  "api/Global.TestInventory.html": {
    "href": "api/Global.TestInventory.html",
    "title": "Class TestInventory | PAdam Softworks",
    "keywords": "Class TestInventory Testuje klase Inventory Inheritance Object TestInventory Namespace : Global Assembly : cs.temp.dll.dll Syntax public class TestInventory Methods AddItem_OnExistingItem_ItemQuantityIncreased() Jak item jest w EQ to podnosi jego ilo�� Declaration public void AddItem_OnExistingItem_ItemQuantityIncreased() AddItem_OnNewItem_CollectionCountIncreased() Sprawdza, czy jak nie ma itemu w inventory, to dodaje nowy item do EQ Declaration public void AddItem_OnNewItem_CollectionCountIncreased() RemoveItem_OnQuantityAboveZero_ItemQuantityDecreased() Sprawdza, czy ilo�� przedmiot�w w ekwipunku zostaje obni�ona, o ile r�nica przedmi�w jest wi�ksza ni� 0 Declaration public void RemoveItem_OnQuantityAboveZero_ItemQuantityDecreased() RemoveItem_OnQuantityBelowZero_ItemRemoved() Je�eli ilo�� przedmiot�w w eq jest mniejsza ni� 0, to powinen zosta� skasowany Declaration public void RemoveItem_OnQuantityBelowZero_ItemRemoved()"
  },
  "api/Global.TimerController.html": {
    "href": "api/Global.TimerController.html",
    "title": "Class TimerController | PAdam Softworks",
    "keywords": "Class TimerController Inheritance Object TimerController Namespace : Global Assembly : cs.temp.dll.dll Syntax public class TimerController : MonoBehaviour Fields Instance Declaration public static TimerController Instance Field Value Type Description TimerController timeCounter Tekst aktualizowany po zmianie czasu Declaration public Text timeCounter Field Value Type Description Text Properties GetElapsedTime Czas, jaki upłynął od włączenia timera w sekundach Declaration public float GetElapsedTime { get; } Property Value Type Description Single IsTimerActive Stan timera, czy jest aktywny bądź zastopowany Declaration public bool IsTimerActive { get; } Property Value Type Description Boolean Methods ResumeTimer() Wznawia działanie timera, jeśli został on zatrzymany Declaration public void ResumeTimer() StartTimer(Boolean) Uruchamia/restartuje timer. Powinien być wywoływany przez scene controller / level controller Declaration public void StartTimer(bool resetTime = true) Parameters Type Name Description Boolean resetTime Prawda jeśli czas ma być wyzerowany, fałsz jeśli licznik czasu ma być kontynuowany StopTimer() Zatrzymuje timer. Nie resetuje czasu Declaration public void StopTimer()"
  },
  "api/Global.TurretController.html": {
    "href": "api/Global.TurretController.html",
    "title": "Class TurretController | PAdam Softworks",
    "keywords": "Class TurretController Inheritance Object TurretController Namespace : Global Assembly : cs.temp.dll.dll Syntax public class TurretController : BaseEnemy Fields BarrelPivot Oś obrotu lufy Declaration public GameObject BarrelPivot Field Value Type Description GameObject bloodSplashEffect Efekt śmierci Declaration public GameObject bloodSplashEffect Field Value Type Description GameObject IsAutoShoot Czy działko strzela cały czas? Declaration public bool IsAutoShoot Field Value Type Description Boolean IsTrap Czy działko jest aktywowane płytą naciskową? Declaration public bool IsTrap Field Value Type Description Boolean MaxAngle Maksymalne wychylenie lufy Declaration public float MaxAngle Field Value Type Description Single MaxRange Maksymalna odległość celu Declaration public float MaxRange Field Value Type Description Single PlayerSpottedDelayDefault Czas między zauważeniem gracza a strzałem Declaration public float PlayerSpottedDelayDefault Field Value Type Description Single PressurePlate Płyta Naciskowa Declaration public GameObject PressurePlate Field Value Type Description GameObject ProjectilePrefab Wystrzeliwany pocisk Declaration public GameObject ProjectilePrefab Field Value Type Description GameObject ProjectileSpeed Prędkość pocisku Declaration public float ProjectileSpeed Field Value Type Description Single RaycastMask Maska do określania co blokuje linię wzroku Declaration public LayerMask RaycastMask Field Value Type Description LayerMask ShotDelayDefault Czas pomiędzy strzałami Declaration public float ShotDelayDefault Field Value Type Description Single TrackPlayer Czy działko śledzi gracza? Declaration public bool TrackPlayer Field Value Type Description Boolean Methods OnDamaged(Int32) Otrzymuje obrażenia Declaration public void OnDamaged(int damage) Parameters Type Name Description Int32 damage OnDeath() Declaration public void OnDeath()"
  },
  "api/Health.BaseHealthSystem.html": {
    "href": "api/Health.BaseHealthSystem.html",
    "title": "Class BaseHealthSystem | PAdam Softworks",
    "keywords": "Class BaseHealthSystem Podstawowy system życia obiektów Inheritance Object BaseHealthSystem EntityHealthSystem Implements IDamageable IHealthPoint IHealable IRevivable IDamageInvurnelable Namespace : Health Assembly : cs.temp.dll.dll Syntax public class BaseHealthSystem : MonoBehaviour, IDamageable, IHealthPoint, IHealable, IRevivable, IDamageInvurnelable Fields _currentHealth Declaration protected int _currentHealth Field Value Type Description Int32 _invulnerabilityTimer Declaration protected float _invulnerabilityTimer Field Value Type Description Single _invulnerable Declaration protected bool _invulnerable Field Value Type Description Boolean _maxHealth Declaration protected int _maxHealth Field Value Type Description Int32 Properties HealthValue Aktualna ilość punktów życia, nie może być większa niż MaxHealth Declaration public int HealthValue { get; } Property Value Type Description Int32 InvulnerabilityDuration Czas nieśmiertelności po otrzymaniu obrażeń w sekundach. Działa tylko gdy InvurnelableAfterDamage jest prawdą Declaration public float InvulnerabilityDuration { get; set; } Property Value Type Description Single InvurnelableAfterDamage Czy jednostka jest nieśmiertelna po otrzymaniu obrażeń Declaration public bool InvurnelableAfterDamage { get; set; } Property Value Type Description Boolean IsDead Czy jednostka jest martwa, zazwyczaj gdy HealthValue jest mniejsze od 0 Declaration public bool IsDead { get; } Property Value Type Description Boolean MaxHealth Maksymalna ilość punktów życia Declaration public int MaxHealth { get; } Property Value Type Description Int32 Methods ChangeHealth(Int32) Funckja zmieniająca aktualną ilość życia Declaration protected virtual HealthChangeResult ChangeHealth(int amount) Parameters Type Name Description Int32 amount Ilość życia do zmiany Returns Type Description HealthChangeResult Zwraca HealthChangeResult z danymi o wykonanych operacjach DisableInvulnerability() Wyłączna stan nieśmiertelności jednostki Declaration public void DisableInvulnerability() EnableInvulnerability(Boolean) Włącza stan nieśmiertelności jednostki Declaration public void EnableInvulnerability(bool enableTimer = true) Parameters Type Name Description Boolean enableTimer Czy timer nieśmiertelnośći powinien być włączony. Podczas fałszu InvulnerabilityDuration przyjmie wartość MaxValue Heal(Int32) Wyleczenie obiektu o określoną ilość życia Declaration public void Heal(int amount) Parameters Type Name Description Int32 amount Ilość życia do wyleczenia Revive() Wskrzeszenie obiektu Declaration public void Revive() TakeDamage(Int32) Otrzymanie określonej ilości obrażeń Declaration public void TakeDamage(int damage) Parameters Type Name Description Int32 damage Ilość życia do zabrania Update() Declaration protected virtual void Update() Implements IDamageable IHealthPoint IHealable IRevivable IDamageInvurnelable"
  },
  "api/Health.EntityHealthSystem.html": {
    "href": "api/Health.EntityHealthSystem.html",
    "title": "Class EntityHealthSystem | PAdam Softworks",
    "keywords": "Class EntityHealthSystem System życia jednostek implementujący zdarzenia Inheritance Object BaseHealthSystem EntityHealthSystem Implements IDamageable IHealthPoint IHealable IRevivable IDamageInvurnelable Inherited Members BaseHealthSystem._currentHealth BaseHealthSystem._maxHealth BaseHealthSystem._invulnerable BaseHealthSystem._invulnerabilityTimer BaseHealthSystem.HealthValue BaseHealthSystem.MaxHealth BaseHealthSystem.IsDead BaseHealthSystem.InvurnelableAfterDamage BaseHealthSystem.InvulnerabilityDuration BaseHealthSystem.Update() BaseHealthSystem.TakeDamage(Int32) BaseHealthSystem.Heal(Int32) BaseHealthSystem.Revive() BaseHealthSystem.EnableInvulnerability(Boolean) BaseHealthSystem.DisableInvulnerability() Namespace : Health Assembly : cs.temp.dll.dll Syntax public class EntityHealthSystem : BaseHealthSystem, IDamageable, IHealthPoint, IHealable, IRevivable, IDamageInvurnelable Fields OnDamaged Zdarzenie otrzymania obrażeń przez jednostkę Declaration public UnityEvent<int> OnDamaged Field Value Type Description UnityEvent < Int32 > OnDeath Zdarzenie śmierci jednostki Declaration public UnityEvent OnDeath Field Value Type Description UnityEvent OnHealed Zdarzenie wyleczenia obrażeń Declaration public UnityEvent<int> OnHealed Field Value Type Description UnityEvent < Int32 > OnHealthChanged Zdarzenie zmiany ilości życia Declaration public UnityEvent<int> OnHealthChanged Field Value Type Description UnityEvent < Int32 > OnMaxHealthChanged Zdarzenie zmiany maksymalnej ilości życia Declaration public UnityEvent<int> OnMaxHealthChanged Field Value Type Description UnityEvent < Int32 > OnRevived Zdarzenie wskrzeszenia jednostki Declaration public UnityEvent OnRevived Field Value Type Description UnityEvent Methods ChangeHealth(Int32) Funckja zmieniająca aktualną ilość życia Declaration protected override HealthChangeResult ChangeHealth(int amount) Parameters Type Name Description Int32 amount Ilość życia do zmiany Returns Type Description HealthChangeResult Zwraca HealthChangeResult z danymi o wykonanych operacjach Overrides BaseHealthSystem.ChangeHealth(Int32) Start() Declaration protected void Start() Implements IDamageable IHealthPoint IHealable IRevivable IDamageInvurnelable"
  },
  "api/Health.HealthChangeResult.html": {
    "href": "api/Health.HealthChangeResult.html",
    "title": "Struct HealthChangeResult | PAdam Softworks",
    "keywords": "Struct HealthChangeResult Namespace : Health Assembly : cs.temp.dll.dll Syntax public struct HealthChangeResult Fields CurrentHealth Declaration public int CurrentHealth Field Value Type Description Int32 HealthBeforeUpdate Declaration public int HealthBeforeUpdate Field Value Type Description Int32 HealthChange Declaration public int HealthChange Field Value Type Description Int32 HealthChanged Declaration public bool HealthChanged Field Value Type Description Boolean"
  },
  "api/Health.HeartContainer.html": {
    "href": "api/Health.HeartContainer.html",
    "title": "Class HeartContainer | PAdam Softworks",
    "keywords": "Class HeartContainer Klasa wyświetlająca ilość żyć Inheritance Object HeartContainer Namespace : Health Assembly : cs.temp.dll.dll Syntax public class HeartContainer : MonoBehaviour Methods OnHealthChanged(Int32) Declaration public void OnHealthChanged(int newHealth) Parameters Type Name Description Int32 newHealth"
  },
  "api/Health.html": {
    "href": "api/Health.html",
    "title": "Namespace Health | PAdam Softworks",
    "keywords": "Namespace Health Classes BaseHealthSystem Podstawowy system życia obiektów EntityHealthSystem System życia jednostek implementujący zdarzenia HeartContainer Klasa wyświetlająca ilość żyć Structs HealthChangeResult Interfaces IDamageable Interfejs implementowany na obiektach które mogą otrzymać obrażenia IDamageInvurnelable IHealable Interfejs implementowany na obiektach które mogą być uleczone IHealthPoint Interfejs deklarujący odpowiednie właściwości dla systemu życia IRevivable"
  },
  "api/Health.IDamageable.html": {
    "href": "api/Health.IDamageable.html",
    "title": "Interface IDamageable | PAdam Softworks",
    "keywords": "Interface IDamageable Interfejs implementowany na obiektach które mogą otrzymać obrażenia Namespace : Health Assembly : cs.temp.dll.dll Syntax public interface IDamageable Methods TakeDamage(Int32) Otrzymanie określonej ilości obrażeń Declaration void TakeDamage(int damage) Parameters Type Name Description Int32 damage Ilość życia do zabrania"
  },
  "api/Health.IDamageInvurnelable.html": {
    "href": "api/Health.IDamageInvurnelable.html",
    "title": "Interface IDamageInvurnelable | PAdam Softworks",
    "keywords": "Interface IDamageInvurnelable Namespace : Health Assembly : cs.temp.dll.dll Syntax public interface IDamageInvurnelable Properties InvulnerabilityDuration Czas nieśmiertelności po otrzymaniu obrażeń w sekundach. Działa tylko gdy InvurnelableAfterDamage jest prawdą Declaration float InvulnerabilityDuration { get; set; } Property Value Type Description Single InvurnelableAfterDamage Czy jednostka jest nieśmiertelna po otrzymaniu obrażeń Declaration bool InvurnelableAfterDamage { get; set; } Property Value Type Description Boolean Methods DisableInvulnerability() Wyłączna stan nieśmiertelności jednostki Declaration void DisableInvulnerability() EnableInvulnerability(Boolean) Włącza stan nieśmiertelności jednostki Declaration void EnableInvulnerability(bool enableTimer = true) Parameters Type Name Description Boolean enableTimer Czy timer nieśmiertelnośći powinien być włączony. Podczas fałszu InvulnerabilityDuration przyjmie wartość MaxValue"
  },
  "api/Health.IHealable.html": {
    "href": "api/Health.IHealable.html",
    "title": "Interface IHealable | PAdam Softworks",
    "keywords": "Interface IHealable Interfejs implementowany na obiektach które mogą być uleczone Namespace : Health Assembly : cs.temp.dll.dll Syntax public interface IHealable Methods Heal(Int32) Wyleczenie obiektu o określoną ilość życia Declaration void Heal(int amount) Parameters Type Name Description Int32 amount Ilość życia do wyleczenia"
  },
  "api/Health.IHealthPoint.html": {
    "href": "api/Health.IHealthPoint.html",
    "title": "Interface IHealthPoint | PAdam Softworks",
    "keywords": "Interface IHealthPoint Interfejs deklarujący odpowiednie właściwości dla systemu życia Namespace : Health Assembly : cs.temp.dll.dll Syntax public interface IHealthPoint Properties HealthValue Aktualna ilość punktów życia, nie może być większa niż MaxHealth Declaration int HealthValue { get; } Property Value Type Description Int32 IsDead Czy jednostka jest martwa, zazwyczaj gdy HealthValue jest mniejsze od 0 Declaration bool IsDead { get; } Property Value Type Description Boolean MaxHealth Maksymalna ilość punktów życia Declaration int MaxHealth { get; } Property Value Type Description Int32"
  },
  "api/Health.IRevivable.html": {
    "href": "api/Health.IRevivable.html",
    "title": "Interface IRevivable | PAdam Softworks",
    "keywords": "Interface IRevivable Namespace : Health Assembly : cs.temp.dll.dll Syntax public interface IRevivable Methods Revive() Wskrzeszenie obiektu Declaration void Revive()"
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "Dokumentacja API | PAdam Softworks",
    "keywords": "Dokumentacja API"
  },
  "articles/creatingItems.html": {
    "href": "articles/creatingItems.html",
    "title": "Obsługa przedmiotów | PAdam Softworks",
    "keywords": "Obsługa przedmiotów Dodawanie przedmiotu na mapę Dodając przedmiot mamy dwie drogi postępowania - stworzenie przedmiotu od początku i podmienienie pliku metadanych, lub skopiowanie już istniejącej instancji. W przypadku drugiej ścieżki należy umieścić prefab \"ItemBase\" w świecie gry. Znajduje się on w katalogu Resources/Items/ . Po utworzeniu i wybraniu z hierarchii ItemBase, w inspektorze powinien się pojawić taki widok: Dobrym nawykiem przy pracy z przedmiotami będzie zablokowanie podglądu inspektora po przez naciśnięcie ikony kłódki (patrz AD. 1). Zablokuje to zmianę widoku w przypadku, gdy klikniemy na inny obiekt w drzewku projektu. Drugim polem (AD. 2) jest miejsce, gdzie podajemy plik z metadanymi danego przedmiotu. Pliki metadanowe powinny znajdować się pod ścieżką Resources/Items/<Nazwa przedmiotu>/<Nazwa przedmiotu>.json . Po wybraniu pliku z danymi, żeby zobaczyć zmiany w edytorze należy chociaż raz uruchomić \"Play mode\". Deklarowanie nowego przedmiotu Deklaracja przedmiotu jest dość prosta. W ścieżce Resources/Items/ należy stworzyć podkatalog z nazwą przedmiotu, a w nim plik .json . Jeśli przedmiot nazywa się xyz wtedy jego ścieżka powinna przybrać formę: Resources/Items/xyz/xyz.json . W pliku JSON, zadeklarować następującą strukturę pliku: { \"IsStackable\": true, // Określa czy przedmiot łączy się z innymi przedmiotami tego samego rodzaju. \"Type\": 0, // Typ przedmiotu - niestety musi być podawany liczbowo. Wymagane, aby API wiedziało jak obsłużyć dany przedmiot. \"Quantity\": 1, // Ilość przedmiotu, który zostanie dodany do ekwipunku. \"Texture\": \"Items/xyz/xyz.png\", // Tekstura, która zostanie ustawiona na przedmiocie. \"Name\": \"xyz\" // Nazwa przedmiotu - przydatne, gdy API potrzebuje sprawdzić jaki przedmiot wpadł do ekwipunku. Jeśli nazwa przedmiotu nie zostanie podana, zostanie ustawiona nazwa pliku, skąd były pobierane metadane. } W obecnej wersji gry rozrózniamy 4 typy przedmiotów: - Money - ID: 0 - PowerUp - ID: 1 - Ammunition - ID: 2 - Health - ID: 3 Ostatnim krokiem jest dodanie tekstury xyz.png do katalogu Items/xyz ."
  },
  "articles/howToAddNewDocument.html": {
    "href": "articles/howToAddNewDocument.html",
    "title": "Dodawanie nowej dokumentacji | PAdam Softworks",
    "keywords": "Dodawanie nowej dokumentacji Instalacja DocFX na lokalnej maszynie (opcjonalne) Pobierz docfx z http://dotnet.github.io/docfx/ . Oficjalna dokumentacja dokładniej opisuje jak zainstalować docfx . Pobierz docfx.zip i rozpakuj zawartość np do folderu D:\\docfx\\ . Dodaj D:\\docfx\\ do PATH dzięki czemu docfx będzie dodane jako globalna polecenie. (Na Windowsie np. set PATH=%PATH%;D:\\docfx\\ .) Tworzenie nowego dokumentu W celu dodania nowego dokumentu do dokumentacji, należy stworzyć nowy plik markdown w folderze Documentation/articles . Struktura folderu articles będzie wyglądać następująco |- articles | |- intro.md | |- howToAddNewDocument.md | |- newDocument.md | |- ...restOfDocuments | |- toc.yml Uzupełnienie nowego dokumentu zawartością w formacie markdown. O formatowaniu markdown można przyczytać więcej tutaj . Aby dodać nowo dodany dokument do paska nawigacji należy wyedytować plik articles/toc.yml Przykładowy plik toc.yml pokazany jest poniżej: - name: Strona główna href: intro.md - name: Dodawanie dokumentacji href: howToAddNewDocument.md - name: Nowy dokument href: newDocument.md Więcej na temat pliku toc.yml można przeczytać w oficjalnej dokumentacji . Testowanie lokalne Aby przetestować wprowadzone zmiany lokalnie należy zainstalować DocFX na lokalnej maszynie. Następnie w folderze Documentation wykonujemy polecenie docfx .\\docfx.json --serve . Po zbudowaniu pod adresem http://localhost:8080 znajdować się bedzię nowo zbudowana dokumentacja która powinna wyglądać podobnie do:"
  },
  "articles/intro.html": {
    "href": "articles/intro.html",
    "title": "Strona główna | PAdam Softworks",
    "keywords": "Strona główna Opis strony głównej"
  },
  "index.html": {
    "href": "index.html",
    "title": "This is the HOMEPAGE. | PAdam Softworks",
    "keywords": "This is the HOMEPAGE . Refer to Markdown for how to write markdown files. Quick Start Notes: Add images to the images folder if the file is referencing an image."
  }
}